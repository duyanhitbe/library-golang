// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: book_info.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countBookInfo = `-- name: CountBookInfo :one
SELECT COUNT(*) FROM "book_infos"
WHERE "deleted_at" IS NULL
`

func (q *Queries) CountBookInfo(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countBookInfoStmt, countBookInfo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBookInfo = `-- name: CreateBookInfo :one
INSERT INTO "book_infos" ("name", "author", "publication_date")
VALUES ($1, $2, $3)
RETURNING id, name, author, publication_date, created_at, updated_at, deleted_at, is_active
`

type CreateBookInfoParams struct {
	Name            string    `json:"name"`
	Author          string    `json:"author"`
	PublicationDate time.Time `json:"publication_date"`
}

func (q *Queries) CreateBookInfo(ctx context.Context, arg CreateBookInfoParams) (*BookInfo, error) {
	row := q.queryRow(ctx, q.createBookInfoStmt, createBookInfo, arg.Name, arg.Author, arg.PublicationDate)
	var i BookInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const deleteOneBookInfoById = `-- name: DeleteOneBookInfoById :one
UPDATE "book_infos"
SET "deleted_at" = NOW()
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, name, author, publication_date, created_at, updated_at, deleted_at, is_active
`

func (q *Queries) DeleteOneBookInfoById(ctx context.Context, id uuid.UUID) (*BookInfo, error) {
	row := q.queryRow(ctx, q.deleteOneBookInfoByIdStmt, deleteOneBookInfoById, id)
	var i BookInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const getOneBookInfoById = `-- name: GetOneBookInfoById :one
SELECT id, name, author, publication_date, created_at, updated_at, deleted_at, is_active FROM "book_infos"
WHERE "id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetOneBookInfoById(ctx context.Context, id uuid.UUID) (*BookInfo, error) {
	row := q.queryRow(ctx, q.getOneBookInfoByIdStmt, getOneBookInfoById, id)
	var i BookInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const listBookInfo = `-- name: ListBookInfo :many
SELECT id, name, author, publication_date, created_at, updated_at, deleted_at, is_active FROM "book_infos"
WHERE "deleted_at" IS NULL
LIMIT $1
OFFSET $2
`

type ListBookInfoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBookInfo(ctx context.Context, arg ListBookInfoParams) ([]*BookInfo, error) {
	rows, err := q.query(ctx, q.listBookInfoStmt, listBookInfo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BookInfo{}
	for rows.Next() {
		var i BookInfo
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.PublicationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneBookInfoById = `-- name: UpdateOneBookInfoById :one
UPDATE "book_infos"
SET "name" = $2, "author" = $3, "publication_date" = $4
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, name, author, publication_date, created_at, updated_at, deleted_at, is_active
`

type UpdateOneBookInfoByIdParams struct {
	ID              uuid.UUID `json:"id"`
	Name            string    `json:"name"`
	Author          string    `json:"author"`
	PublicationDate time.Time `json:"publication_date"`
}

func (q *Queries) UpdateOneBookInfoById(ctx context.Context, arg UpdateOneBookInfoByIdParams) (*BookInfo, error) {
	row := q.queryRow(ctx, q.updateOneBookInfoByIdStmt, updateOneBookInfoById,
		arg.ID,
		arg.Name,
		arg.Author,
		arg.PublicationDate,
	)
	var i BookInfo
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}
