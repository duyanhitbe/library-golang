// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: book_borrower.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createBookBorrower = `-- name: CreateBookBorrower :one
INSERT INTO "book_borrower" ("borrower_id", "book_id")
VALUES ($1, $2)
RETURNING borrower_id, book_id
`

type CreateBookBorrowerParams struct {
	BorrowerID uuid.UUID `json:"borrower_id"`
	BookID     uuid.UUID `json:"book_id"`
}

func (q *Queries) CreateBookBorrower(ctx context.Context, arg CreateBookBorrowerParams) (*BookBorrower, error) {
	row := q.queryRow(ctx, q.createBookBorrowerStmt, createBookBorrower, arg.BorrowerID, arg.BookID)
	var i BookBorrower
	err := row.Scan(&i.BorrowerID, &i.BookID)
	return &i, err
}

const getAllBookBorrowerByBookId = `-- name: GetAllBookBorrowerByBookId :many
SELECT borrower_id, book_id FROM "book_borrower"
WHERE "book_id" = $1
`

func (q *Queries) GetAllBookBorrowerByBookId(ctx context.Context, bookID uuid.UUID) ([]*BookBorrower, error) {
	rows, err := q.query(ctx, q.getAllBookBorrowerByBookIdStmt, getAllBookBorrowerByBookId, bookID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BookBorrower{}
	for rows.Next() {
		var i BookBorrower
		if err := rows.Scan(&i.BorrowerID, &i.BookID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBookBorrowerByBorrowerId = `-- name: GetAllBookBorrowerByBorrowerId :many
SELECT borrower_id, book_id FROM "book_borrower"
WHERE "borrower_id" = $1
`

func (q *Queries) GetAllBookBorrowerByBorrowerId(ctx context.Context, borrowerID uuid.UUID) ([]*BookBorrower, error) {
	rows, err := q.query(ctx, q.getAllBookBorrowerByBorrowerIdStmt, getAllBookBorrowerByBorrowerId, borrowerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BookBorrower{}
	for rows.Next() {
		var i BookBorrower
		if err := rows.Scan(&i.BorrowerID, &i.BookID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneBookBorrower = `-- name: GetOneBookBorrower :one
SELECT borrower_id, book_id FROM "book_borrower"
WHERE "borrower_id" = $1 AND "book_id" = $2
`

type GetOneBookBorrowerParams struct {
	BorrowerID uuid.UUID `json:"borrower_id"`
	BookID     uuid.UUID `json:"book_id"`
}

func (q *Queries) GetOneBookBorrower(ctx context.Context, arg GetOneBookBorrowerParams) (*BookBorrower, error) {
	row := q.queryRow(ctx, q.getOneBookBorrowerStmt, getOneBookBorrower, arg.BorrowerID, arg.BookID)
	var i BookBorrower
	err := row.Scan(&i.BorrowerID, &i.BookID)
	return &i, err
}
