// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countBookStmt, err = db.PrepareContext(ctx, countBook); err != nil {
		return nil, fmt.Errorf("error preparing query CountBook: %w", err)
	}
	if q.countBookInfoStmt, err = db.PrepareContext(ctx, countBookInfo); err != nil {
		return nil, fmt.Errorf("error preparing query CountBookInfo: %w", err)
	}
	if q.countCategoryStmt, err = db.PrepareContext(ctx, countCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CountCategory: %w", err)
	}
	if q.createBookStmt, err = db.PrepareContext(ctx, createBook); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBook: %w", err)
	}
	if q.createBookInfoStmt, err = db.PrepareContext(ctx, createBookInfo); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBookInfo: %w", err)
	}
	if q.createCategoryStmt, err = db.PrepareContext(ctx, createCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCategory: %w", err)
	}
	if q.deleteOneBookByIdStmt, err = db.PrepareContext(ctx, deleteOneBookById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOneBookById: %w", err)
	}
	if q.deleteOneBookInfoByIdStmt, err = db.PrepareContext(ctx, deleteOneBookInfoById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOneBookInfoById: %w", err)
	}
	if q.deleteOneCategoryByIdStmt, err = db.PrepareContext(ctx, deleteOneCategoryById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOneCategoryById: %w", err)
	}
	if q.getOneBookByIdStmt, err = db.PrepareContext(ctx, getOneBookById); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneBookById: %w", err)
	}
	if q.getOneBookInfoByIdStmt, err = db.PrepareContext(ctx, getOneBookInfoById); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneBookInfoById: %w", err)
	}
	if q.getOneCategoryByIdStmt, err = db.PrepareContext(ctx, getOneCategoryById); err != nil {
		return nil, fmt.Errorf("error preparing query GetOneCategoryById: %w", err)
	}
	if q.listBookStmt, err = db.PrepareContext(ctx, listBook); err != nil {
		return nil, fmt.Errorf("error preparing query ListBook: %w", err)
	}
	if q.listBookInfoStmt, err = db.PrepareContext(ctx, listBookInfo); err != nil {
		return nil, fmt.Errorf("error preparing query ListBookInfo: %w", err)
	}
	if q.listCategoryStmt, err = db.PrepareContext(ctx, listCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListCategory: %w", err)
	}
	if q.updateOneBookByIdStmt, err = db.PrepareContext(ctx, updateOneBookById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOneBookById: %w", err)
	}
	if q.updateOneBookInfoByIdStmt, err = db.PrepareContext(ctx, updateOneBookInfoById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOneBookInfoById: %w", err)
	}
	if q.updateOneCategoryByIdStmt, err = db.PrepareContext(ctx, updateOneCategoryById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOneCategoryById: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countBookStmt != nil {
		if cerr := q.countBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBookStmt: %w", cerr)
		}
	}
	if q.countBookInfoStmt != nil {
		if cerr := q.countBookInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBookInfoStmt: %w", cerr)
		}
	}
	if q.countCategoryStmt != nil {
		if cerr := q.countCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countCategoryStmt: %w", cerr)
		}
	}
	if q.createBookStmt != nil {
		if cerr := q.createBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBookStmt: %w", cerr)
		}
	}
	if q.createBookInfoStmt != nil {
		if cerr := q.createBookInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBookInfoStmt: %w", cerr)
		}
	}
	if q.createCategoryStmt != nil {
		if cerr := q.createCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCategoryStmt: %w", cerr)
		}
	}
	if q.deleteOneBookByIdStmt != nil {
		if cerr := q.deleteOneBookByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOneBookByIdStmt: %w", cerr)
		}
	}
	if q.deleteOneBookInfoByIdStmt != nil {
		if cerr := q.deleteOneBookInfoByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOneBookInfoByIdStmt: %w", cerr)
		}
	}
	if q.deleteOneCategoryByIdStmt != nil {
		if cerr := q.deleteOneCategoryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOneCategoryByIdStmt: %w", cerr)
		}
	}
	if q.getOneBookByIdStmt != nil {
		if cerr := q.getOneBookByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneBookByIdStmt: %w", cerr)
		}
	}
	if q.getOneBookInfoByIdStmt != nil {
		if cerr := q.getOneBookInfoByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneBookInfoByIdStmt: %w", cerr)
		}
	}
	if q.getOneCategoryByIdStmt != nil {
		if cerr := q.getOneCategoryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOneCategoryByIdStmt: %w", cerr)
		}
	}
	if q.listBookStmt != nil {
		if cerr := q.listBookStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBookStmt: %w", cerr)
		}
	}
	if q.listBookInfoStmt != nil {
		if cerr := q.listBookInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBookInfoStmt: %w", cerr)
		}
	}
	if q.listCategoryStmt != nil {
		if cerr := q.listCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCategoryStmt: %w", cerr)
		}
	}
	if q.updateOneBookByIdStmt != nil {
		if cerr := q.updateOneBookByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOneBookByIdStmt: %w", cerr)
		}
	}
	if q.updateOneBookInfoByIdStmt != nil {
		if cerr := q.updateOneBookInfoByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOneBookInfoByIdStmt: %w", cerr)
		}
	}
	if q.updateOneCategoryByIdStmt != nil {
		if cerr := q.updateOneCategoryByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOneCategoryByIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                        DBTX
	tx                        *sql.Tx
	countBookStmt             *sql.Stmt
	countBookInfoStmt         *sql.Stmt
	countCategoryStmt         *sql.Stmt
	createBookStmt            *sql.Stmt
	createBookInfoStmt        *sql.Stmt
	createCategoryStmt        *sql.Stmt
	deleteOneBookByIdStmt     *sql.Stmt
	deleteOneBookInfoByIdStmt *sql.Stmt
	deleteOneCategoryByIdStmt *sql.Stmt
	getOneBookByIdStmt        *sql.Stmt
	getOneBookInfoByIdStmt    *sql.Stmt
	getOneCategoryByIdStmt    *sql.Stmt
	listBookStmt              *sql.Stmt
	listBookInfoStmt          *sql.Stmt
	listCategoryStmt          *sql.Stmt
	updateOneBookByIdStmt     *sql.Stmt
	updateOneBookInfoByIdStmt *sql.Stmt
	updateOneCategoryByIdStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		countBookStmt:             q.countBookStmt,
		countBookInfoStmt:         q.countBookInfoStmt,
		countCategoryStmt:         q.countCategoryStmt,
		createBookStmt:            q.createBookStmt,
		createBookInfoStmt:        q.createBookInfoStmt,
		createCategoryStmt:        q.createCategoryStmt,
		deleteOneBookByIdStmt:     q.deleteOneBookByIdStmt,
		deleteOneBookInfoByIdStmt: q.deleteOneBookInfoByIdStmt,
		deleteOneCategoryByIdStmt: q.deleteOneCategoryByIdStmt,
		getOneBookByIdStmt:        q.getOneBookByIdStmt,
		getOneBookInfoByIdStmt:    q.getOneBookInfoByIdStmt,
		getOneCategoryByIdStmt:    q.getOneCategoryByIdStmt,
		listBookStmt:              q.listBookStmt,
		listBookInfoStmt:          q.listBookInfoStmt,
		listCategoryStmt:          q.listCategoryStmt,
		updateOneBookByIdStmt:     q.updateOneBookByIdStmt,
		updateOneBookInfoByIdStmt: q.updateOneBookInfoByIdStmt,
		updateOneCategoryByIdStmt: q.updateOneCategoryByIdStmt,
	}
}
