// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countUser = `-- name: CountUser :one
SELECT COUNT(*) FROM "users"
WHERE "deleted_at" IS NULL
`

func (q *Queries) CountUser(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUser)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "users" ("username", "password", "role")
VALUES ($1, $2, $3)
RETURNING id, username, password, role, created_at, updated_at, deleted_at, is_active
`

type CreateUserParams struct {
	Username string   `json:"username"`
	Password string   `json:"password"`
	Role     RoleEnum `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const deleteOneUserById = `-- name: DeleteOneUserById :one
UPDATE "users"
SET "deleted_at" = NOW()
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, username, password, role, created_at, updated_at, deleted_at, is_active
`

func (q *Queries) DeleteOneUserById(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRowContext(ctx, deleteOneUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const getOneUserById = `-- name: GetOneUserById :one
SELECT id, username, password, role, created_at, updated_at, deleted_at, is_active FROM "users"
WHERE "id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetOneUserById(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRowContext(ctx, getOneUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const getOneUserByUsername = `-- name: GetOneUserByUsername :one
SELECT id, username, password, role, created_at, updated_at, deleted_at, is_active FROM "users"
WHERE "username" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetOneUserByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getOneUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const listUser = `-- name: ListUser :many
SELECT id, username, password, role, created_at, updated_at, deleted_at, is_active FROM "users"
WHERE "deleted_at" IS NULL
LIMIT $1
OFFSET $2
`

type ListUserParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, listUser, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneUserById = `-- name: UpdateOneUserById :one
UPDATE "users"
SET "username" = $2, "role" = $3
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, username, password, role, created_at, updated_at, deleted_at, is_active
`

type UpdateOneUserByIdParams struct {
	ID       uuid.UUID `json:"id"`
	Username string    `json:"username"`
	Role     RoleEnum  `json:"role"`
}

func (q *Queries) UpdateOneUserById(ctx context.Context, arg UpdateOneUserByIdParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateOneUserById, arg.ID, arg.Username, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}
