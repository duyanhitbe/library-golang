// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const countCategory = `-- name: CountCategory :one
SELECT COUNT(*) FROM "categories"
WHERE "deleted_at" IS NULL
`

func (q *Queries) CountCategory(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countCategoryStmt, countCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO "categories" ("name")
VALUES ($1)
RETURNING id, name, created_at, updated_at, deleted_at, is_active
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (*Category, error) {
	row := q.queryRow(ctx, q.createCategoryStmt, createCategory, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const deleteOneCategoryById = `-- name: DeleteOneCategoryById :one
UPDATE "categories"
SET "deleted_at" = NOW()
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, name, created_at, updated_at, deleted_at, is_active
`

func (q *Queries) DeleteOneCategoryById(ctx context.Context, id uuid.UUID) (*Category, error) {
	row := q.queryRow(ctx, q.deleteOneCategoryByIdStmt, deleteOneCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const getOneCategoryById = `-- name: GetOneCategoryById :one
SELECT id, name, created_at, updated_at, deleted_at, is_active FROM "categories"
WHERE "id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetOneCategoryById(ctx context.Context, id uuid.UUID) (*Category, error) {
	row := q.queryRow(ctx, q.getOneCategoryByIdStmt, getOneCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const listCategory = `-- name: ListCategory :many
SELECT id, name, created_at, updated_at, deleted_at, is_active FROM "categories"
WHERE "deleted_at" IS NULL
LIMIT $1
OFFSET $2
`

type ListCategoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategory(ctx context.Context, arg ListCategoryParams) ([]*Category, error) {
	rows, err := q.query(ctx, q.listCategoryStmt, listCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneCategoryById = `-- name: UpdateOneCategoryById :one
UPDATE "categories"
SET "name" = $2
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, name, created_at, updated_at, deleted_at, is_active
`

type UpdateOneCategoryByIdParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdateOneCategoryById(ctx context.Context, arg UpdateOneCategoryByIdParams) (*Category, error) {
	row := q.queryRow(ctx, q.updateOneCategoryByIdStmt, updateOneCategoryById, arg.ID, arg.Name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}
