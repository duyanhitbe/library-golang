// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: book.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const countBook = `-- name: CountBook :one
SELECT COUNT(*) FROM "books"
WHERE "deleted_at" IS NULL
`

func (q *Queries) CountBook(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBook)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countBookByIds = `-- name: CountBookByIds :one
SELECT COUNT(*) FROM "books"
WHERE "id" = ANY($1::uuid[]) AND "deleted_at" IS NULL
`

func (q *Queries) CountBookByIds(ctx context.Context, ids []uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBookByIds, pq.Array(ids))
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBook = `-- name: CreateBook :one
INSERT INTO "books" ("category_id", "book_info_id")
VALUES ($1, $2)
RETURNING id, category_id, book_info_id, created_at, updated_at, deleted_at, is_active
`

type CreateBookParams struct {
	CategoryID uuid.UUID `json:"category_id"`
	BookInfoID uuid.UUID `json:"book_info_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (*Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.CategoryID, arg.BookInfoID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BookInfoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const deleteOneBookById = `-- name: DeleteOneBookById :one
UPDATE "books"
SET "deleted_at" = NOW()
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, category_id, book_info_id, created_at, updated_at, deleted_at, is_active
`

func (q *Queries) DeleteOneBookById(ctx context.Context, id uuid.UUID) (*Book, error) {
	row := q.db.QueryRowContext(ctx, deleteOneBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BookInfoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const getOneBookById = `-- name: GetOneBookById :one
SELECT id, category_id, book_info_id, created_at, updated_at, deleted_at, is_active FROM "books"
WHERE "id" = $1 AND "deleted_at" IS NULL
`

func (q *Queries) GetOneBookById(ctx context.Context, id uuid.UUID) (*Book, error) {
	row := q.db.QueryRowContext(ctx, getOneBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BookInfoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}

const listBook = `-- name: ListBook :many
SELECT id, category_id, book_info_id, created_at, updated_at, deleted_at, is_active FROM "books"
WHERE "deleted_at" IS NULL
LIMIT $1
OFFSET $2
`

type ListBookParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBook(ctx context.Context, arg ListBookParams) ([]*Book, error) {
	rows, err := q.db.QueryContext(ctx, listBook, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.BookInfoID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBookByIds = `-- name: ListBookByIds :many
SELECT id, category_id, book_info_id, created_at, updated_at, deleted_at, is_active FROM "books"
WHERE "id" = ANY($3::uuid[]) AND "deleted_at" IS NULL
LIMIT $1
OFFSET $2
`

type ListBookByIdsParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Ids    []uuid.UUID `json:"ids"`
}

func (q *Queries) ListBookByIds(ctx context.Context, arg ListBookByIdsParams) ([]*Book, error) {
	rows, err := q.db.QueryContext(ctx, listBookByIds, arg.Limit, arg.Offset, pq.Array(arg.Ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.BookInfoID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOneBookById = `-- name: UpdateOneBookById :one
UPDATE "books"
SET "category_id" = $2
WHERE "id" = $1 AND "deleted_at" IS NULL
RETURNING id, category_id, book_info_id, created_at, updated_at, deleted_at, is_active
`

type UpdateOneBookByIdParams struct {
	ID         uuid.UUID `json:"id"`
	CategoryID uuid.UUID `json:"category_id"`
}

func (q *Queries) UpdateOneBookById(ctx context.Context, arg UpdateOneBookByIdParams) (*Book, error) {
	row := q.db.QueryRowContext(ctx, updateOneBookById, arg.ID, arg.CategoryID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.BookInfoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsActive,
	)
	return &i, err
}
